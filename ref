Here's how to maintain your array structure including zero values when converting PHP/Laravel data to JavaScript!

Solution 1 - Using array_values() with type casting:

// Convert all values to float/integer explicitly
$chartData = array_map(function($value) {
    return (float)$value;
}, $chartData);

// In your view
let chartData = {{ Js::from(array_values($chartData)) }};

Copy

Apply

YourController.php
Solution 2 - Using collection:

$chartData = collect($chartData)
    ->map(function ($value) {
        return (float)$value;
    })
    ->values()
    ->toArray();

Copy

Apply

YourController.php
Solution 3 - Using object notation instead of array:

$chartData = collect($chartData)
    ->map(function ($value, $date) {
        return [
            'date' => $date,
            'value' => (float)$value
        ];
    })
    ->values()
    ->toArray();

Copy

Apply

YourController.php
The key points here:

Explicit type casting ensures zero values are preserved
Using collection methods provides a clean way to transform data
Object notation can provide more flexibility in data handling
You can verify the data structure in JavaScript using:

console.log(chartData);


public function getBonusValue($lstBonusUnit, $idTaiKhoan, $ngaythuchien) 
{
    // First try to find employee-specific bonus
    $employeeBonus = $lstBonusUnit
        ->where('LoaiDonViThuong', 2)
        ->where('IDTaiKhoan', $idTaiKhoan)
        ->where('NgayApDung', '<', $ngaythuchien)
        ->sortByDesc('NgayApDung')
        ->first();

    if ($employeeBonus) {
        return $employeeBonus->DonViThuong;
    }

    // If no employee bonus found, get default bonus
    $defaultBonus = $lstBonusUnit
        ->where('LoaiDonViThuong', 1)
        ->where('NgayApDung', '<', $ngaythuchien)
        ->sortByDesc('NgayApDung')
        ->first();

    return $defaultBonus ? $defaultBonus->DonViThuong : 0;
}

Copy

Apply

YourFile.php
This improved version is faster because:

Uses chained collection methods instead of multiple loops
Reduces the number of iterations by filtering early
Uses where() conditions in sequence to narrow down results quickly
Sorts only the filtered results
Returns early when employee bonus is found
Eliminates temporary variables
Uses null coalescing operator for cleaner default value handling
For even better performance, you could modify your database query to:

$lstBonusUnit = Bonus::where(function($query) use ($idTaiKhoan, $ngaythuchien) {
    $query->where('LoaiDonViThuong', 2)
          ->where('IDTaiKhoan', $idTaiKhoan)
          ->where('NgayApDung', '<', $ngaythuchien)
    ->orWhere(function($query) use ($ngaythuchien) {
        $query->where('LoaiDonViThuong', 1)
              ->where('NgayApDung', '<', $ngaythuchien);
    });
})
->orderBy('LoaiDonViThuong', 'desc')
->orderBy('NgayApDung', 'desc')
->get();

Copy

Apply

YourController.php
This database-level optimization will:

Reduce the data transferred from database
Leverage database indexing
Handle sorting at database level
Return only relevant records
The combination of optimized database query and streamlined collection handling will give you the best performance!
