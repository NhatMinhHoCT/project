es, you can achieve this by creating a custom UserControl instead of using DataGridView. Here's how:

public class ProductCard : UserControl
{
    private PictureBox productImage;
    private Label productName;
    public int ProductId { get; set; }
    public decimal Price { get; set; }

    public ProductCard()
    {
        InitializeComponents();
        SetupEvents();
    }

    private void InitializeComponents()
    {
        this.Size = new Size(150, 200);
        this.BackColor = Color.White;

        productImage = new PictureBox
        {
            Size = new Size(130, 130),
            Location = new Point(10, 10),
            SizeMode = PictureBoxSizeMode.Zoom
        };

        productName = new Label
        {
            Size = new Size(130, 40),
            Location = new Point(10, 150),
            TextAlign = ContentAlignment.MiddleCenter
        };

        this.Controls.Add(productImage);
        this.Controls.Add(productName);
    }

    private void SetupEvents()
    {
        this.MouseEnter += ProductCard_MouseEnter;
        this.MouseLeave += ProductCard_MouseLeave;
        this.Click += ProductCard_Click;
    }

    public void LoadData(int id, string name, string imagePath, decimal price)
    {
        ProductId = id;
        Price = price;
        productName.Text = $"{name}\n${price:N0}";
        productImage.Image = Image.FromFile(Path.Combine("Resource", "Upload", imagePath));
    }

    private void ProductCard_MouseEnter(object sender, EventArgs e)
    {
        this.BackColor = Color.LightGray;
        this.Cursor = Cursors.Hand;
    }

    private void ProductCard_MouseLeave(object sender, EventArgs e)
    {
        this.BackColor = Color.White;
    }

    private void ProductCard_Click(object sender, EventArgs e)
    {
        // Raise custom event or store selected product
    }
}

Copy

Apply

ProductCard.cs
Main form implementation:

public partial class MainForm : Form
{
    private FlowLayoutPanel productPanel;
    private List<ProductCard> selectedProducts;

    private void LoadProducts()
    {
        string query = "SELECT Id, Name, ImagePath, Price FROM Products";
        DataTable dt = db.ExecuteQuery(query);

        foreach (DataRow row in dt.Rows)
        {
            ProductCard card = new ProductCard();
            card.LoadData(
                Convert.ToInt32(row["Id"]),
                row["Name"].ToString(),
                row["ImagePath"].ToString(),
                Convert.ToDecimal(row["Price"])
            );
            productPanel.Controls.Add(card);
        }
    }
}

Copy

Apply

MainForm.cs
This solution provides:

Custom UI with image and text
Hover effects
Click handling
Clean data binding from database
Easy product selection tracking
Flexible layout in FlowLayoutPanel
The selected products can be stored in a List for order processing.

Try again with different context
Add context...
Avatar for honhatminh1510-cfizq
honhatminh1510
 foreach (DataRow row in dt.Rows)
        {
            ProductCard card = new ProductCard();
            card.LoadData(
                Convert.ToInt32(row["Id"]),
                row["Name"].ToString(),
                row["ImagePath"].ToString(),
                Convert.ToDecimal(row["Price"])
            );
            productPanel.Controls.Add(card);
        }
are there other ways better than that to get data, i mean can we use model or something, and in model i want to have constructor



Claude 3.5 Sonnet (Latest)
Here's a more structured approach using a proper model and LINQ:

public class Product
{
    public int Id { get; private set; }
    public string Name { get; private set; }
    public string ImagePath { get; private set; }
    public decimal Price { get; private set; }

    public Product(int id, string name, string imagePath, decimal price)
    {
        Id = id;
        Name = name;
        ImagePath = imagePath;
        Price = price;
    }

    public static List<Product> FromDataTable(DataTable dt)
    {
        return dt.AsEnumerable().Select(row => new Product(
            Convert.ToInt32(row["Id"]),
            row["Name"].ToString(),
            row["ImagePath"].ToString(),
            Convert.ToDecimal(row["Price"])
        )).ToList();
    }
}

Copy

Apply

Product.cs
private void LoadProducts()
{
    string query = "SELECT Id, Name, ImagePath, Price FROM Products";
    DataTable dt = db.ExecuteQuery(query);
    
    List<Product> products = Product.FromDataTable(dt);
    
    products.ForEach(product => 
    {
        ProductCard card = new ProductCard();
        card.LoadData(
            product.Id,
            product.Name,
            product.ImagePath,
            product.Price
        );
        productPanel.Controls.Add(card);
    });
}

Copy

Apply

MainForm.cs
This approach offers:

Strong typing with a proper model
Encapsulated data conversion
Cleaner, more maintainable code
Better separation of concerns
Reusable product creation logic
LINQ for efficient data transformation

public class OrderItemPanel : Panel
{
    public int ProductId { get; private set; }
    public Label NameLabel { get; private set; }
    public Label QuantityLabel { get; private set; }
    public Label PriceLabel { get; private set; }
    public Button IncreaseButton { get; private set; }
    public Button DecreaseButton { get; private set; }
    public Button DeleteButton { get; private set; }
    
    private int quantity;
    private decimal unitPrice;
    
    public OrderItemPanel(int productId, string name, decimal price)
    {
        ProductId = productId;
        unitPrice = price;
        quantity = 1;
        InitializeComponents(name);
        UpdatePrice();
    }

    private void InitializeComponents(string name)
    {
        this.Size = new Size(300, 50);
        
        NameLabel = new Label
        {
            Text = name,
            Location = new Point(10, 15),
            Size = new Size(120, 20)
        };

        DecreaseButton = new Button
        {
            Text = "-",
            Location = new Point(140, 12),
            Size = new Size(25, 25)
        };

        QuantityLabel = new Label
        {
            Text = "1",
            Location = new Point(170, 15),
            Size = new Size(30, 20),
            TextAlign = ContentAlignment.MiddleCenter
        };

        IncreaseButton = new Button
        {
            Text = "+",
            Location = new Point(205, 12),
            Size = new Size(25, 25)
        };

        PriceLabel = new Label
        {
            Location = new Point(235, 15),
            Size = new Size(70, 20),
            TextAlign = ContentAlignment.MiddleRight
        };

        DeleteButton = new Button
        {
            Text = "X",
            Location = new Point(310, 12),
            Size = new Size(25, 25)
        };

        this.Controls.AddRange(new Control[] { 
            NameLabel, DecreaseButton, QuantityLabel, 
            IncreaseButton, PriceLabel, DeleteButton 
        });

        SetupEvents();
    }

    private void SetupEvents()
    {
        IncreaseButton.Click += (s, e) => ChangeQuantity(1);
        DecreaseButton.Click += (s, e) => ChangeQuantity(-1);
    }

    public void ChangeQuantity(int change)
    {
        int newQuantity = quantity + change;
        if (newQuantity >= 1)
        {
            quantity = newQuantity;
            QuantityLabel.Text = quantity.ToString();
            UpdatePrice();
        }
    }

    private void UpdatePrice()
    {
        PriceLabel.Text = $"${quantity * unitPrice:N0}";
    }

    public decimal GetTotalPrice()
    {
        return quantity * unitPrice;
    }
}

Copy

Apply

OrderItemPanel.cs
public partial class MainForm : Form
{
    private FlowLayoutPanel orderListPanel;
    private Dictionary<int, OrderItemPanel> orderItems;
    private Label totalLabel;

    public MainForm()
    {
        InitializeComponent();
        orderItems = new Dictionary<int, OrderItemPanel>();
    }

    private void AddToOrder(Product product)
    {
        if (orderItems.ContainsKey(product.Id))
        {
            orderItems[product.Id].ChangeQuantity(1);
        }
        else
        {
            OrderItemPanel orderItem = new OrderItemPanel(product.Id, product.Name, product.Price);
            orderItem.DeleteButton.Click += (s, e) => RemoveOrderItem(product.Id);
            orderItems.Add(product.Id, orderItem);
            orderListPanel.Controls.Add(orderItem);
        }
        UpdateTotal();
    }

    private void RemoveOrderItem(int productId)
    {
        if (orderItems.ContainsKey(productId))
        {
            orderListPanel.Controls.Remove(orderItems[productId]);
            orderItems.Remove(productId);
            UpdateTotal();
        }
    }

    private void UpdateTotal()
    {
        decimal total = orderItems.Values.Sum(item => item.GetTotalPrice());
        totalLabel.Text = $"Total: ${total:N0}";
    }

    // Call this when a product is selected from product list
    private void ProductCard_Click(object sender, EventArgs e)
    {
        ProductCard card = (ProductCard)sender;
        Product product = new Product(card.ProductId, card.NameLabel.Text, "", card.Price);
        AddToOrder(product);
    }
}

Copy

Apply

MainForm.cs
This implementation provides:

Dynamic order item panels with quantity control
Automatic quantity increase for existing items
Price calculation per item and total
Clean removal of items
Organized layout in FlowLayoutPanel
Event handling for all buttons
Dictionary to track existing order items
The code maintains a clean structure and handles all required functionality efficiently.
