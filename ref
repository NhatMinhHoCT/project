es, you can achieve this by creating a custom UserControl instead of using DataGridView. Here's how:

public class ProductCard : UserControl
{
    private PictureBox productImage;
    private Label productName;
    public int ProductId { get; set; }
    public decimal Price { get; set; }

    public ProductCard()
    {
        InitializeComponents();
        SetupEvents();
    }

    private void InitializeComponents()
    {
        this.Size = new Size(150, 200);
        this.BackColor = Color.White;

        productImage = new PictureBox
        {
            Size = new Size(130, 130),
            Location = new Point(10, 10),
            SizeMode = PictureBoxSizeMode.Zoom
        };

        productName = new Label
        {
            Size = new Size(130, 40),
            Location = new Point(10, 150),
            TextAlign = ContentAlignment.MiddleCenter
        };

        this.Controls.Add(productImage);
        this.Controls.Add(productName);
    }

    private void SetupEvents()
    {
        this.MouseEnter += ProductCard_MouseEnter;
        this.MouseLeave += ProductCard_MouseLeave;
        this.Click += ProductCard_Click;
    }

    public void LoadData(int id, string name, string imagePath, decimal price)
    {
        ProductId = id;
        Price = price;
        productName.Text = $"{name}\n${price:N0}";
        productImage.Image = Image.FromFile(Path.Combine("Resource", "Upload", imagePath));
    }

    private void ProductCard_MouseEnter(object sender, EventArgs e)
    {
        this.BackColor = Color.LightGray;
        this.Cursor = Cursors.Hand;
    }

    private void ProductCard_MouseLeave(object sender, EventArgs e)
    {
        this.BackColor = Color.White;
    }

    private void ProductCard_Click(object sender, EventArgs e)
    {
        // Raise custom event or store selected product
    }
}

Copy

Apply

ProductCard.cs
Main form implementation:

public partial class MainForm : Form
{
    private FlowLayoutPanel productPanel;
    private List<ProductCard> selectedProducts;

    private void LoadProducts()
    {
        string query = "SELECT Id, Name, ImagePath, Price FROM Products";
        DataTable dt = db.ExecuteQuery(query);

        foreach (DataRow row in dt.Rows)
        {
            ProductCard card = new ProductCard();
            card.LoadData(
                Convert.ToInt32(row["Id"]),
                row["Name"].ToString(),
                row["ImagePath"].ToString(),
                Convert.ToDecimal(row["Price"])
            );
            productPanel.Controls.Add(card);
        }
    }
}

Copy

Apply

MainForm.cs
This solution provides:

Custom UI with image and text
Hover effects
Click handling
Clean data binding from database
Easy product selection tracking
Flexible layout in FlowLayoutPanel
The selected products can be stored in a List for order processing.

Try again with different context
Add context...
Avatar for honhatminh1510-cfizq
honhatminh1510
 foreach (DataRow row in dt.Rows)
        {
            ProductCard card = new ProductCard();
            card.LoadData(
                Convert.ToInt32(row["Id"]),
                row["Name"].ToString(),
                row["ImagePath"].ToString(),
                Convert.ToDecimal(row["Price"])
            );
            productPanel.Controls.Add(card);
        }
are there other ways better than that to get data, i mean can we use model or something, and in model i want to have constructor



Claude 3.5 Sonnet (Latest)
Here's a more structured approach using a proper model and LINQ:

public class Product
{
    public int Id { get; private set; }
    public string Name { get; private set; }
    public string ImagePath { get; private set; }
    public decimal Price { get; private set; }

    public Product(int id, string name, string imagePath, decimal price)
    {
        Id = id;
        Name = name;
        ImagePath = imagePath;
        Price = price;
    }

    public static List<Product> FromDataTable(DataTable dt)
    {
        return dt.AsEnumerable().Select(row => new Product(
            Convert.ToInt32(row["Id"]),
            row["Name"].ToString(),
            row["ImagePath"].ToString(),
            Convert.ToDecimal(row["Price"])
        )).ToList();
    }
}

Copy

Apply

Product.cs
private void LoadProducts()
{
    string query = "SELECT Id, Name, ImagePath, Price FROM Products";
    DataTable dt = db.ExecuteQuery(query);
    
    List<Product> products = Product.FromDataTable(dt);
    
    products.ForEach(product => 
    {
        ProductCard card = new ProductCard();
        card.LoadData(
            product.Id,
            product.Name,
            product.ImagePath,
            product.Price
        );
        productPanel.Controls.Add(card);
    });
}

Copy

Apply

MainForm.cs
This approach offers:

Strong typing with a proper model
Encapsulated data conversion
Cleaner, more maintainable code
Better separation of concerns
Reusable product creation logic
LINQ for efficient data transformation
