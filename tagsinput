Thank you for providing the SQL query. This situation is indeed unusual, as typically, querying a smaller date range should be faster or at least as fast as querying a larger range. Let's analyze the query and suggest some optimizations:

Index on NgayThucHien: Ensure you have an index on the NgayThucHien column in the tiendothuchien table.

CREATE INDEX idx_ngaythuchien ON tiendothuchien (NgayThucHien);

Copy

Apply

Composite Indexes: Consider creating composite indexes on frequently used columns in your WHERE clauses, including the isdeleted columns.

CREATE INDEX idx_tiendothuchien_composite ON tiendothuchien (isdeleted, NgayThucHien);

Copy

Apply

Join Order: The order of joins can significantly affect performance. Try reordering the joins to start with the table that has the date filter:

FROM tiendothuchien
LEFT JOIN congviecchitiet ON congviecchitiet.idcongviecchitiet = tiendothuchien.idcongviecchitiet AND congviecchitiet.isdeleted = 0
LEFT JOIN congviec ON congviec.idcongviecchitiet = congviecchitiet.idcongviecchitiet AND congviec.isdeleted = 0
...

Copy

Apply

Use INNER JOINs: If possible, replace LEFT JOINs with INNER JOINs where appropriate. This can significantly improve performance.

Subquery for Date Range: Try using a subquery for the date range:

FROM (SELECT * FROM tiendothuchien 
      WHERE NgayThucHien BETWEEN '2024-01-01' AND '2024-01-31' 
      AND isdeleted = 0) AS tiendothuchien
LEFT JOIN ...

Copy

Apply

Optimize isdeleted Checks: Instead of checking isdeleted = 0 for each table, consider using a view or a subquery that only includes non-deleted records.

Update Statistics: Run ANALYZE TABLE on all involved tables to ensure the query optimizer has up-to-date statistics.

Check for Data Skew: The performance difference might be due to data distribution. Check if there's significantly more data in January compared to the rest of the year.

Use Query Hints: If you know which indexes should be used, you can force them with index hints.

Rewrite as UNION: Sometimes, splitting a complex query into simpler queries and UNIONing the results can be faster.

Check for Locking Issues: Ensure there are no locks or concurrent transactions affecting the January data specifically.

Partitioning: If this is a recurring issue, consider partitioning the tiendothuchien table by date range.

To further diagnose:

Run EXPLAIN on both queries (year-long and month-long) and compare the execution plans.
Check the actual row counts returned by both queries.
Monitor system resources during query execution to rule out external factors.
Use query profiling tools to identify which part of the query is taking the most time.
Here's a slightly optimized version of your query to try:

SELECT t.TGThucHien, t.GiaTri, t.NgayThucHien, 
       cv.TenCongViec, d.IDDuAn, gd.TenGiaiDoanDuAn, dvdl.TenDonViDuLieu
FROM (SELECT * FROM tiendothuchien 
      WHERE NgayThucHien BETWEEN '2024-01-01' AND '2024-01-31' 
      AND isdeleted = 0) AS t
INNER JOIN congviecchitiet cvc ON cvc.idcongviecchitiet = t.idcongviecchitiet AND cvc.isdeleted = 0
INNER JOIN congviec cv ON cv.idcongviecchitiet = cvc.idcongviecchitiet AND cv.isdeleted = 0
INNER JOIN congviecduan cvd ON cvd.idcongviec = cv.idcongviec AND cvd.isdeleted = 0
INNER JOIN duan d ON d.idduan = cvd.idduan AND d.isdeleted = 0
INNER JOIN giaidoanduan gd ON cvd.idgiaidoan = gd.idgiaidoan AND gd.isdeleted = 0
INNER JOIN donvidulieu dvdl ON dvdl.iddonvidulieu = d.iddonvidulieu AND dvdl.isdeleted = 0;

Copy

Apply

If this doesn't improve performance, we may need to look at the table structures, indexes, and actual execution plans to provide more specific advice.

Try again with different context
Add context...
Avatar for honhatminh1510-cfizq
honhatminh1510
Can you turn this sql query into laravel eloquent query



Claude 3.5 Sonnet
Certainly! I'll convert the SQL query into a Laravel Eloquent query. First, let's assume you have the following models set up corresponding to your tables:

class TienDoThucHien extends Model
{
    protected $table = 'tiendothuchien';
    // Define relationships
}

class CongViecChiTiet extends Model
{
    protected $table = 'congviecchitiet';
    // Define relationships
}

class CongViec extends Model
{
    protected $table = 'congviec';
    // Define relationships
}

class CongViecDuAn extends Model
{
    protected $table = 'congviecduan';
    // Define relationships
}

class DuAn extends Model
{
    protected $table = 'duan';
    // Define relationships
}

class GiaiDoanDuAn extends Model
{
    protected $table = 'giaidoanduan';
    // Define relationships
}

class DonViDuLieu extends Model
{
    protected $table = 'donvidulieu';
    // Define relationships
}

Copy

Apply

Now, here's the Eloquent query that corresponds to your SQL query:

use Carbon\Carbon;

$startDate = Carbon::parse('2024-01-01');
$endDate = Carbon::parse('2024-12-31');

$results = TienDoThucHien::select(
    'tiendothuchien.TGThucHien',
    'tiendothuchien.GiaTri',
    'tiendothuchien.NgayThucHien',
    'congviec.TenCongViec',
    'duan.IDDuAn',
    'giaidoanduan.TenGiaiDoanDuAn',
    'donvidulieu.TenDonViDuLieu'
)
->leftJoin('congviecchitiet', 'congviecchitiet.idcongviecchitiet', '=', 'tiendothuchien.idcongviecchitiet')
->leftJoin('congviec', 'congviec.idcongviecchitiet', '=', 'congviecchitiet.idcongviecchitiet')
->leftJoin('congviecduan', 'congviecduan.idcongviec', '=', 'congviec.idcongviec')
->leftJoin('duan', 'duan.idduan', '=', 'congviecduan.idduan')
->leftJoin('giaidoanduan', 'congviecduan.idgiaidoan', '=', 'giaidoanduan.idgiaidoan')
->leftJoin('donvidulieu', 'donvidulieu.iddonvidulieu', '=', 'duan.iddonvidulieu')
->where('tiendothuchien.isdeleted', 0)
->where('congviecchitiet.isdeleted', 0)
->where('congviec.isdeleted', 0)
->where('congviecduan.isdeleted', 0)
->where('duan.isdeleted', 0)
->where('giaidoanduan.isdeleted', 0)
->where('donvidulieu.isdeleted', 0)
->whereBetween('tiendothuchien.NgayThucHien', [$startDate, $endDate])
->get();

Copy

Apply

To optimize this query, you can try the following:

Use whereHas to check for non-deleted related records:
$results = TienDoThucHien::select(
    'tiendothuchien.TGThucHien',
    'tiendothuchien.GiaTri',
    'tiendothuchien.NgayThucHien',
    'congviec.TenCongViec',
    'duan.IDDuAn',
    'giaidoanduan.TenGiaiDoanDuAn',
    'donvidulieu.TenDonViDuLieu'
)
->with(['congViecChiTiet' => function ($query) {
    $query->where('isdeleted', 0);
}])
->whereHas('congViecChiTiet', function ($query) {
    $query->where('isdeleted', 0);
})
->whereHas('congViecChiTiet.congViec', function ($query) {
    $query->where('isdeleted', 0);
})
->whereHas('congViecChiTiet.congViec.congViecDuAn', function ($query) {
    $query->where('isdeleted', 0);
})
->whereHas('congViecChiTiet.congViec.congViecDuAn.duAn', function ($query) {
    $query->where('isdeleted', 0);
})
->whereHas('congViecChiTiet.congViec.congViecDuAn.giaiDoanDuAn', function ($query) {
    $query->where('isdeleted', 0);
})
->whereHas('congViecChiTiet.congViec.congViecDuAn.duAn.donViDuLieu', function ($query) {
    $query->where('isdeleted', 0);
})
->whereBetween('NgayThucHien', [$startDate, $endDate])
->where('isdeleted', 0)
->get();

Copy

Apply

Use eager loading to reduce the number of queries:
$results = TienDoThucHien::with([
    'congViecChiTiet' => function ($query) {
        $query->where('isdeleted', 0);
    },
    'congViecChiTiet.congViec' => function ($query) {
        $query->where('isdeleted', 0);
    },
    'congViecChiTiet.congViec.congViecDuAn' => function ($query) {
        $query->where('isdeleted', 0);
    },
    'congViecChiTiet.congViec.congViecDuAn.duAn' => function ($query) {
        $query->where('isdeleted', 0);
    },
    'congViecChiTiet.congViec.congViecDuAn.giaiDoanDuAn' => function ($query) {
        $query->where('isdeleted', 0);
    },
    'congViecChiTiet.congViec.congViecDuAn.duAn.donViDuLieu' => function ($query) {
        $query->where('isdeleted', 0);
    }
])
->whereBetween('NgayThucHien', [$startDate, $endDate])
->where('isdeleted', 0)
->get();

$results = $results->map(function ($item) {
    return [
        'TGThucHien' => $item->TGThucHien,
        'GiaTri' => $item->GiaTri,
        'NgayThucHien' => $item->NgayThucHien,
        'TenCongViec' => $item->congViecChiTiet->congViec->TenCongViec,
        'IDDuAn' => $item->congViecChiTiet->congViec->congViecDuAn->duAn->IDDuAn,
        'TenGiaiDoanDuAn' => $item->congViecChiTiet->congViec->congViecDuAn->giaiDoanDuAn->TenGiaiDoanDuAn,
        'TenDonViDuLieu' => $item->congViecChiTiet->congViec->congViecDuAn->duAn->donViDuLieu->TenDonViDuLieu,
    ];
});

Copy

Apply

If you're only interested in the specific fields and don't need the entire related models, you can use selectRaw to optimize the query further:
$results = TienDoThucHien::selectRaw('
    tiendothuchien.TGThucHien,
    tiendothuchien.GiaTri,
    tiendothuchien.NgayThucHien,
    congviec.TenCongViec,
    duan.IDDuAn,
    giaidoanduan.TenGiaiDoanDuAn,
    donvidulieu.TenDonViDuLieu
')
->join('congviecchitiet', 'congviecchitiet.idcongviecchitiet', '=', 'tiendothuchien.idcongviecchitiet')
->join('congviec', 'congviec.idcongviecchitiet', '=', 'congviecchitiet.idcongviecchitiet')
->join('congviecduan', 'congviecduan.idcongviec', '=', 'congviec.idcongviec')
->join('duan', 'duan.idduan', '=', 'congviecduan.idduan')
->join('giaidoanduan', 'congviecduan.idgiaidoan', '=', 'giaidoanduan.idgiaidoan')
->join('donvidulieu', 'donvidulieu.iddonvidulieu', '=', 'duan.iddonvidulieu')
->where('tiendothuchien.isdeleted', 0)
->where('congviecchitiet.isdeleted', 0)
->where('congviec.isdeleted', 0)
->where('congviecduan.isdeleted', 0)
->where('duan.isdeleted', 0)
->where('giaidoanduan.isdeleted', 0)
->where('donvidulieu.isdeleted', 0)
->whereBetween('tiendothuchien.NgayThucHien', [$startDate, $endDate])
->get();
