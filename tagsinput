public bool ExecuteTransaction(string[] queries, List<OleDbParameter[]> parametersList)
{
    OleDbTransaction transaction = null;
    try
    {
        OpenConnection();
        transaction = connection.BeginTransaction();
        int orderId = 0;

        for (int i = 0; i < queries.Length; i++)
        {
            using (OleDbCommand cmd = new OleDbCommand(queries[i], connection, transaction))
            {
                // For first query (Order insert)
                if (i == 0)
                {
                    if (parametersList[i] != null)
                        cmd.Parameters.AddRange(parametersList[i]);
                    
                    int result = cmd.ExecuteNonQuery();
                    if (result <= 0)
                    {
                        transaction.Rollback();
                        return false;
                    }

                    // Get OrderId
                    cmd.CommandText = "SELECT @@IDENTITY";
                    orderId = Convert.ToInt32(cmd.ExecuteScalar());
                }
                // For subsequent queries (OrderDetails)
                else
                {
                    OleDbParameter[] parameters = parametersList[i];
                    parameters[0] = new OleDbParameter("@OrderId", orderId);
                    cmd.Parameters.AddRange(parameters);
                    
                    int result = cmd.ExecuteNonQuery();
                    if (result <= 0)
                    {
                        transaction.Rollback();
                        return false;
                    }
                }
            }
        }

        transaction.Commit();
        return true;
    }
    catch (Exception)
    {
        throw;
    }
    finally
    {
        CloseConnection();
    }
}

Copy

Apply

DatabaseController.cs
Usage example:

string[] queries = new string[]
{
    "INSERT INTO Orders (StartTime, EndTime, Total) VALUES (?, ?, ?)",
    "INSERT INTO OrderDetails (OrderId, ProductId, Quantity, Price) VALUES (?, ?, ?, ?)",
    "INSERT INTO OrderDetails (OrderId, ProductId, Quantity, Price) VALUES (?, ?, ?, ?)"
};

List<OleDbParameter[]> parametersList = new List<OleDbParameter[]>();

// Order parameters
parametersList.Add(new OleDbParameter[]
{
    new OleDbParameter("@StartTime", DateTime.Now),
    new OleDbParameter("@EndTime", DateTime.Now),
    new OleDbParameter("@Total", totalAmount)
});

// OrderDetails parameters
foreach (OrderDetail detail in orderDetails)
{
    parametersList.Add(new OleDbParameter[]
    {
        null, // OrderId placeholder
        new OleDbParameter("@ProductId", detail.ProductId),
        new OleDbParameter("@Quantity", detail.Quantity),
        new OleDbParameter("@Price", detail.Price)
    });
}

bool success = db.ExecuteTransaction(queries, parametersList);

Copy

Apply

Regarding your questions:

Transaction rollback is completely safe - it reverts ALL queries executed within the transaction scope. If a rollback occurs at any point, everything done since the BeginTransaction is undone. This maintains database consistency.

For update/delete transactions, use the same method with different queries:

// Update example
string[] updateQueries = new string[]
{
    "UPDATE Orders SET Total = ? WHERE OrderId = ?",
    "UPDATE OrderDetails SET Quantity = ? WHERE OrderId = ? AND ProductId = ?"
};

// Delete example
string[] deleteQueries = new string[]
{
    "DELETE FROM OrderDetails WHERE OrderId = ?",
    "DELETE FROM Orders WHERE OrderId = ?"
};




Claude 3.5 Sonnet (Latest)
Here's the clean version with a single return point and catch block without transaction handling:

public bool ExecuteTransaction(string[] queries, List<OleDbParameter[]> parametersList)
{
    OleDbTransaction transaction = null;
    bool success = true;
    try
    {
        OpenConnection();
        transaction = connection.BeginTransaction();
        int orderId = 0;

        // Process Order
        using (OleDbCommand cmd = new OleDbCommand(queries[0], connection, transaction))
        {
            if (parametersList[0] != null)
                cmd.Parameters.AddRange(parametersList[0]);
            
            if (cmd.ExecuteNonQuery() <= 0)
            {
                success = false;
                transaction.Rollback();
            }
            else
            {
                cmd.CommandText = "SELECT @@IDENTITY";
                orderId = Convert.ToInt32(cmd.ExecuteScalar());
            }
        }

        // Process Order Details
        if (success)
        {
            for (int i = 1; i < queries.Length; i++)
            {
                using (OleDbCommand cmd = new OleDbCommand(queries[i], connection, transaction))
                {
                    OleDbParameter[] parameters = parametersList[i];
                    parameters[0] = new OleDbParameter("@OrderId", orderId);
                    cmd.Parameters.AddRange(parameters);
                    
                    if (cmd.ExecuteNonQuery() <= 0)
                    {
                        success = false;
                        transaction.Rollback();
                        break;
                    }
                }
            }
        }

        if (success)
            transaction.Commit();
    }
    catch (Exception)
    {
        success = false;
        throw;
    }
    finally
    {
        CloseConnection();
    }
    
    return success;
}
