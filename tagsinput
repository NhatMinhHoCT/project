The behavior you're describing is actually the expected functionality of the Bootstrap Tags Input library. Here's what's happening and how to work with it:

What's happening:

The Bootstrap Tags Input library transforms your regular input field into a more interactive tag input field.
It hides the original input and creates a new div with the class bootstrap-tagsinput to display and manage the tags visually.
The original input is kept in the DOM (with display: none) to store the actual value, which is updated as tags are added or removed.
This is not a problem to solve, but rather how you should work with the library:

The hidden input still contains the value(s) and will be submitted with the form.
When you need to programmatically get or set values, you should still work with the original input element.
Here's how to work with Bootstrap Tags Input effectively:

Initialization:

$('#yourInputId').tagsinput();



Getting values:

var tags = $('#yourInputId').val(); // Gets a comma-separated string of tags
// or
var tagsArray = $('#yourInputId').tagsinput('items'); // Gets an array of tag objects



Adding tags programmatically:

$('#yourInputId').tagsinput('add', 'New Tag');



Removing tags programmatically:

$('#yourInputId').tagsinput('remove', 'Tag to Remove');



Clearing all tags:

$('#yourInputId').tagsinput('removeAll');



Listening for changes:

$('#yourInputId').on('itemAdded', function(event) {
    console.log('Tag added: ', event.item);
});

$('#yourInputId').on('itemRemoved', function(event) {
    console.log('Tag removed: ', event.item);
});



Styling:

You can style the bootstrap-tagsinput div and its children to customize the appearance.
Form submission:

The hidden original input will still be submitted with the form, containing all tags as a comma-separated string.
Server-side handling:

On the server, you'll receive the tags as a single string. You may need to split this string to process individual tags.
If you need to access the visible input for some reason:

$('.bootstrap-tagsinput input').val(); // Gets the current input value (before a tag is added)



Remember, for most operations, you should still reference the original input by its ID, not the newly created div.

If you absolutely need the input to be visible for some reason (which is unusual when using this library), you could try:

$('#yourInputId').show();
$('.bootstrap-tagsinput').hide();



However, this would defeat the purpose of using the Tags Input library. If you need a visible, editable field, you might want to reconsider whether this library is the right choice for your use case.

Try again with different context
Add context...
Avatar for honhatminh1510-cfizq
The new input dont have my input field css properties, that the problem


I understand now. The issue is that the new input created by the Bootstrap Tags Input library doesn't inherit the CSS properties of your original input field. Here are a few ways to address this:

Apply CSS to the new input: You can target the new input created by the library and apply your desired CSS properties. Add this to your CSS file:

.bootstrap-tagsinput input {
    /* Add your desired CSS properties here */
    width: 100%;
    padding: 10px;
    font-size: 16px;
    /* Add any other properties you need */
}



Copy styles programmatically: You can copy the styles from your original input to the new input created by the library. Add this JavaScript after initializing the tagsinput:

$('#yourInputId').on('initialize', function() {
    var $original = $(this);
    var $new = $original.next('.bootstrap-tagsinput').find('input');
    
    // Copy specific styles
    var stylesToCopy = ['width', 'height', 'padding', 'font-size', 'border', 'border-radius'];
    stylesToCopy.forEach(function(style) {
        $new.css(style, $original.css(style));
    });
    
    // Or copy all computed styles
    // var styles = window.getComputedStyle($original[0]);
    // $new.css(Object.assign({}, ...Array.from(styles).map(k => ({[k]: styles[k]}))));
});



Modify the library's CSS: If you're using a CSS file for Bootstrap Tags Input, you can modify it directly to match your styling needs.

Use a wrapper: Wrap your input in a div and style the wrapper. The library will create its elements inside this wrapper, potentially making it easier to control the overall appearance:

<div class="my-input-wrapper">
    <input id="yourInputId" type="text" />
</div>



.my-input-wrapper {
    /* Your desired styles */
}
.my-input-wrapper .bootstrap-tagsinput {
    /* Adjust the tagsinput to fit your needs */
}
.my-input-wrapper .bootstrap-tagsinput input {
    /* Style the new input */
}



Custom initialization: You can pass options to the tagsinput initialization to control some aspects of its appearance:

$('#yourInputId').tagsinput({
    tagClass: 'my-custom-tag-class',
    inputClass: 'my-custom-input-class'
});



Then style these classes in your CSS.

Override the library's CSS: If the library's CSS is interfering with your styles, you might need to use more specific selectors or even !important (use sparingly) to override them:

.bootstrap-tagsinput input {
    width: 100% !important;
    padding: 10px !important;
    /* Other properties */
}



Reinitialize with your styles: Destroy and reinitialize the tagsinput after applying your styles:

$('#yourInputId').tagsinput('destroy');
$('#yourInputId').css({
    // Your desired styles
}).tagsinput();



Choose the method that best fits your specific situation and coding style. Remember to test thoroughly, especially for responsiveness and cross-browser compatibility, as custom styling can sometimes lead to unexpected results in different environments.

Try again with different context
Add context...
Avatar for honhatminh1510-cfizq
i have a dropdown search form, when i click on it, it will show the form to type in the search key, however. when i click to blank space except the form space, it hide itself, then i add javascript, preventdefautl to hide.bs.dropdown, but the problem is when i click on the submit button to send the data to controller, the form still there. Help me fix this


I understand your situation. You want the dropdown to stay open when interacting with the form, but close when clicking outside, and also close when submitting the form. Here's a solution that should address all these requirements:

First, let's modify the event listener to prevent the dropdown from closing when interacting with the form:
$(document).ready(function() {
    $('.dropdown-menu').on('click', function(e) {
        e.stopPropagation();
    });

    $('.dropdown').on('hide.bs.dropdown', function(e) {
        // Prevent closing if clicking inside the form
        if ($(e.target).hasClass('keep-open') || $(e.target).parents('.keep-open').length) {
            e.preventDefault();
        }
    });
});



Now, let's add a function to close the dropdown manually:
function closeDropdown() {
    $('.dropdown').removeClass('show');
    $('.dropdown-menu').removeClass('show');
}



Modify your form submission to use AJAX and close the dropdown after submission:
$('#searchForm').on('submit', function(e) {
    e.preventDefault();
    
    $.ajax({
        url: $(this).attr('action'),
        method: $(this).attr('method'),
        data: $(this).serialize(),
        success: function(response) {
            // Handle the response
            console.log(response);
            
            // Close the dropdown
            closeDropdown();
        },
        error: function(xhr) {
            // Handle errors
            console.error(xhr);
        }
    });
});



Update your HTML to include the 'keep-open' class on the form:
<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Search
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <form id="searchForm" class="px-4 py-3 keep-open" action="/search" method="post">
            @csrf
            <div class="form-group">
                <label for="searchInput">Search</label>
                <input type="text" class="form-control" id="searchInput" name="search" placeholder="Enter search term">
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>
</div>



This solution does the following:

It prevents the dropdown from closing when clicking inside the form.
It allows the dropdown to close when clicking outside the form.
It manually closes the dropdown after the form is submitted via AJAX.
Make sure to adjust the selectors and class names to match your specific HTML structure if needed.

Also, remember to handle the form submission on the server-side (in your Laravel controller) and return an appropriate response.

If you're not using AJAX and want to submit the form traditionally, you can modify the form submission like this:

$('#searchForm').on('submit', function() {
    // Close the dropdown
    closeDropdown();
    // The form will submit normally
});



This will close the dropdown before the form submits and navigates to a new page.

Try again with different context
Add context...
Avatar for honhatminh1510-cfizq
I just want it close when i click on submit button, or the sort button (the button that show the form)


I understand. You want the dropdown to close only when clicking the submit button or the button that opens the dropdown (the sort button). Here's a solution that should work for your case:

First, let's modify the event listener to prevent the dropdown from closing when interacting with the form:
$(document).ready(function() {
    $('.dropdown-menu').on('click', function(e) {
        e.stopPropagation();
    });

    $('.dropdown').on('hide.bs.dropdown', function(e) {
        // Always prevent the default hiding behavior
        e.preventDefault();
    });
});



Now, let's add a function to close the dropdown manually:
function closeDropdown() {
    $('.dropdown').removeClass('show');
    $('.dropdown-menu').removeClass('show');
}



Add click event listeners for the submit button and the sort button:
// Close dropdown when clicking the submit button
$('#searchForm').on('submit', function(e) {
    e.preventDefault();
    
    // Your form submission logic here (AJAX or traditional)
    
    // Close the dropdown
    closeDropdown();
});

// Close dropdown when clicking the sort button (assuming it has the class 'dropdown-toggle')
$('.dropdown-toggle').on('click', function() {
    if ($('.dropdown').hasClass('show')) {
        closeDropdown();
    }
});



Update your HTML to include necessary classes and IDs:
<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Sort/Search
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <form id="searchForm" class="px-4 py-3" action="/search" method="post">
            @csrf
            <div class="form-group">
                <label for="searchInput">Search</label>
                <input type="text" class="form-control" id="searchInput" name="search" placeholder="Enter search term">
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>
</div>



This solution does the following:

It prevents the dropdown from closing when clicking inside the form or anywhere else on the page.
It closes the dropdown when the form is submitted.
It toggles the dropdown when clicking the sort/search button (closes if open, opens if closed).
If you're using AJAX for form submission, you can modify the form submission like this:

$('#searchForm').on('submit', function(e) {
    e.preventDefault();
    
    $.ajax({
        url: $(this).attr('action'),
        method: $(this).attr('method'),
        data: $(this).serialize(),
        success: function(response) {
            // Handle the response
            console.log(response);
            
            // Close the dropdown
            closeDropdown();
        },
        error: function(xhr) {
            // Handle errors
            console.error(xhr);
        }
    });
});



This will close the dropdown after the AJAX request is successful.

Remember to adjust the selectors and class names to match your specific HTML structure if needed. Also, ensure that you're including jQuery and Bootstrap's JavaScript in your project for these interactions to work properly.



Try again with different context
Add context...
