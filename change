use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rules\Password;

public function changePassword(Request $request)
{
    $request->validate([
        'current_password' => ['required', 'current_password'],
        'new_password' => ['required', 'confirmed', Password::min(8)
            ->mixedCase()
            ->numbers()
            ->symbols()
            ->uncompromised(),
        ],
    ]);

    $user = Auth::user();
    $user->password = Hash::make($request->new_password);
    $user->save();

    // Logout from all devices
    Auth::logoutOtherDevices($request->new_password);

    // Optional: You can also regenerate the session token
    $request->session()->regenerate();

    return redirect()->route('dashboard')->with('status', 'Password changed successfully.');
}



This method does the following:

Validates the current password and new password
Updates the user's password
Logs out the user from all other devices
Regenerates the session token for added security
Route for changing password:
Route::post('/change-password', [PasswordController::class, 'changePassword'])->name('password.change');



View for changing password:
<form method="POST" action="{{ route('password.change') }}">
    @csrf
    <div>
        <label for="current_password">Current Password</label>
        <input id="current_password" type="password" name="current_password" required>
    </div>
    <div>
        <label for="new_password">New Password</label>
        <input id="new_password" type="password" name="new_password" required>
    </div>
    <div>
        <label for="new_password_confirmation">Confirm New Password</label>
        <input id="new_password_confirmation" type="password" name="new_password_confirmation" required>
    </div>
    <button type="submit">Change Password</button>
</form>



Regex for password validation:
Here's a regex that matches a password with at least 8 characters, one lowercase letter, one uppercase letter, one number, and one special character:

^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$



Explanation:

^ : Start of the string
(?=.*[a-z]) : At least one lowercase letter
(?=.*[A-Z]) : At least one uppercase letter
(?=.*\d) : At least one digit
(?=.*[@$!%*?&]) : At least one special character (you can modify this set)
[A-Za-z\d@$!%*?&]{8,} : At least 8 characters long, consisting of allowed characters
$ : End of the string
You can use this regex in your Laravel validation rules like this:

'new_password' => [
    'required',
    'confirmed',
    'regex:/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/',
],

To query the bonus data for a specific time range, you can use a SQL query that checks for overlapping date ranges. Here's a SQL command that will return the bonus information for a given time period:

SELECT IDBonus, IDUser, Bonus, StartDate, EndDate
FROM bonus
WHERE 
    (StartDate <= :endDate AND EndDate >= :startDate)
    AND IDUser = :userId
ORDER BY StartDate;

Copy

Apply

In this query:

:startDate is the start of the period you're querying (e.g., '2023-03-01' for March 1st)
:endDate is the end of the period you're querying (e.g., '2023-03-31' for March 31st)
:userId is the ID of the user you're querying for
The WHERE clause checks if the bonus period overlaps with the queried period. It will return all bonus entries that:

Start before or on the end of the queried period, AND
End after or on the start of the queried period
This ensures that you get all bonuses that were active for any part of the queried period.

Here's how you might use this in a PHP script with PDO:

$startDate = '2023-03-01';
$endDate = '2023-03-31';
$userId = 1;

$stmt = $pdo->prepare("
    SELECT IDBonus, IDUser, Bonus, StartDate, EndDate
    FROM bonus
    WHERE 
        (StartDate <= :endDate AND EndDate >= :startDate)
        AND IDUser = :userId
    ORDER BY StartDate
");

$stmt->execute([
    ':startDate' => $startDate,
    ':endDate' => $endDate,
    ':userId' => $userId
]);

$bonuses = $stmt->fetchAll(PDO::FETCH_ASSOC);

foreach ($bonuses as $bonus) {
    echo "Bonus: {$bonus['Bonus']}, Start: {$bonus['StartDate']}, End: {$bonus['EndDate']}\n";
}

Copy

Apply

This query will return all matching bonus entries for the specified user and time period. In your example, if you query for March 2023, it would return both bonus entries because they both overlap with that month.

Remember to properly sanitize and validate user inputs before using them in your SQL queries to prevent SQL injection attacks.

However, Laravel provides a more readable way to define password rules, as shown in the changePassword method above. The Password facade allows you to chain rules, which is more maintainable and easier to read than a complex regex.

Remember to handle errors and display appropriate messages to the user if the password change fails or if the validation fails. Also, ensure that your application is using HTTPS to protect sensitive information during transmission.
